[{"path":"https://pkg.robjhyndman.com/calcal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Hyndman. Author, maintainer, copyright holder.","code":""},{"path":"https://pkg.robjhyndman.com/calcal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hyndman R (2025). calcal: Calendrical Calculations. R package version 0.0.0.9000, https://pkg.robjhyndman.com/calcal/.","code":"@Manual{,   title = {calcal: Calendrical Calculations},   author = {Rob Hyndman},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://pkg.robjhyndman.com/calcal/}, }"},{"path":"https://pkg.robjhyndman.com/calcal/index.html","id":"calcal-","dir":"","previous_headings":"","what":"Calendrical Calculations","title":"Calendrical Calculations","text":"goal calcal calendrical calculations, based algorithms described Reingold Dershowitz (2018) Calendrical Calculations, 4th edition, Cambridge University Press.","code":""},{"path":"https://pkg.robjhyndman.com/calcal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calendrical Calculations","text":"can install development version calcal GitHub :","code":"# install.packages(\"pak\") pak::pak(\"robjhyndman/calcal\")"},{"path":"https://pkg.robjhyndman.com/calcal/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calendrical Calculations","text":"Dates multiple calendars: US holidays Christian holidays","code":"library(calcal) #>  #> Attaching package: 'calcal' #> The following object is masked from 'package:base': #>  #>     julian tibble::tibble(   dates = seq(as.Date(\"1900-02-27\"), length = 15, by = \"1 day\"),   RD = as_rd(dates),   Gregorian = as_gregorian(dates),   Julian = as_julian(dates) ) #> # A tibble: 15 × 4 #>    dates          RD  Gregorian     Julian #>    <date>       <RD>      <Gre>      <Jul> #>  1 1900-02-27 693653 1900-02-27 1900-02-15 #>  2 1900-02-28 693654 1900-02-28 1900-02-16 #>  3 1900-03-01 693655 1900-03-01 1900-02-17 #>  4 1900-03-02 693656 1900-03-02 1900-02-18 #>  5 1900-03-03 693657 1900-03-03 1900-02-19 #>  6 1900-03-04 693658 1900-03-04 1900-02-20 #>  7 1900-03-05 693659 1900-03-05 1900-02-21 #>  8 1900-03-06 693660 1900-03-06 1900-02-22 #>  9 1900-03-07 693661 1900-03-07 1900-02-23 #> 10 1900-03-08 693662 1900-03-08 1900-02-24 #> 11 1900-03-09 693663 1900-03-09 1900-02-25 #> 12 1900-03-10 693664 1900-03-10 1900-02-26 #> 13 1900-03-11 693665 1900-03-11 1900-02-27 #> 14 1900-03-12 693666 1900-03-12 1900-02-28 #> 15 1900-03-13 693667 1900-03-13 1900-02-29 c(   us_memorial_day(2025),   us_independence_day(2025),   us_labor_day(2025),   us_election_day(2025),   us_daylight_saving_start(2025),   us_daylight_saving_end(2025) ) #> <gregorian[6]> #> [1] 2025-05-26 2025-07-04 2025-09-01 2025-11-04 2025-04-06 2025-10-26 c(   easter(2025),   orthodox_easter(2025),   alt_orthodox_easter(2025),   pentecost(2025),   advent(2025),   christmas(2025),   epiphany(2026),   eastern_orthodox_christmas(2026) ) #> <gregorian[8]> #> [1] 2025-04-20 2025-04-20 2025-04-20 2025-06-08 2025-11-30 2025-12-25 2026-01-04 #> [8] 2026-01-07"},{"path":"https://pkg.robjhyndman.com/calcal/reference/calcal-package.html","id":null,"dir":"Reference","previous_headings":"","what":"calcal: Calendrical Calculations — calcal-package","title":"calcal: Calendrical Calculations — calcal-package","text":"R implementation algorithms described Reingold Dershowitz (2018) doi:10.1017/9781107415058 .","code":""},{"path":[]},{"path":"https://pkg.robjhyndman.com/calcal/reference/calcal-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"calcal: Calendrical Calculations — calcal-package","text":"Maintainer: Rob Hyndman Rob.Hyndman@monash.edu (ORCID) [copyright holder]","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/calcal-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — calcal-vctrs","title":"Internal vctrs methods — calcal-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/christian.html","id":null,"dir":"Reference","previous_headings":"","what":"Christian Ecclesiastical Holidays — advent","title":"Christian Ecclesiastical Holidays — advent","text":"Functions return Gregorian dates various Christian ecclesiastical holidays special days","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/christian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Christian Ecclesiastical Holidays — advent","text":"","code":"advent(year)  christmas(year)  eastern_orthodox_christmas(year)  epiphany(year)  easter(year)  orthodox_easter(year)  alt_orthodox_easter(year)  pentecost(year)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/christian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Christian Ecclesiastical Holidays — advent","text":"year Gregorian year","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/christian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Christian Ecclesiastical Holidays — advent","text":"","code":"advent(2025) #> <gregorian[1]> #> [1] 2025-11-30 christmas(2025) #> <gregorian[1]> #> [1] 2025-12-25 eastern_orthodox_christmas(2025) #> <gregorian[1]> #> [1] 2025-01-07 epiphany(2025) #> <gregorian[1]> #> [1] 2025-01-05 easter(2025) #> <gregorian[1]> #> [1] 2025-04-20 orthodox_easter(2025) #> <gregorian[1]> #> [1] 2025-04-20 alt_orthodox_easter(2025) #> <gregorian[1]> #> [1] 2025-04-20 pentecost(2025) #> <gregorian[1]> #> [1] 2025-06-08"},{"path":"https://pkg.robjhyndman.com/calcal/reference/gregorian.html","id":null,"dir":"Reference","previous_headings":"","what":"Gregorian dates — gregorian","title":"Gregorian dates — gregorian","text":"Create Gregorian date object. Dates establishment Gregorian calendar computed retrospectively.","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/gregorian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gregorian dates — gregorian","text":"","code":"gregorian(year = integer(), month = integer(), day = integer())  as_gregorian(date, ...)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/gregorian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gregorian dates — gregorian","text":"year numeric vector years month numeric vector months day numeric vector days date Vector dates calendar ... Additional arguments currently used","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/gregorian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gregorian dates — gregorian","text":"gregorian vector object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/gregorian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gregorian dates — gregorian","text":"","code":"gregorian(2025, 4, 19) #> <gregorian[1]> #> [1] 2025-04-19 as_gregorian(\"2016-01-01\") #> <gregorian[1]> #> [1] 2016-01-01 as_gregorian(Sys.Date()) #> <gregorian[1]> #> [1] 2025-04-27 tibble::tibble(   x = seq(as.Date(\"2025-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"),   y = as_gregorian(x) ) #> # A tibble: 365 × 2 #>    x                   y #>    <date>          <Gre> #>  1 2025-01-01 2025-01-01 #>  2 2025-01-02 2025-01-02 #>  3 2025-01-03 2025-01-03 #>  4 2025-01-04 2025-01-04 #>  5 2025-01-05 2025-01-05 #>  6 2025-01-06 2025-01-06 #>  7 2025-01-07 2025-01-07 #>  8 2025-01-08 2025-01-08 #>  9 2025-01-09 2025-01-09 #> 10 2025-01-10 2025-01-10 #> # ℹ 355 more rows"},{"path":"https://pkg.robjhyndman.com/calcal/reference/julian.html","id":null,"dir":"Reference","previous_headings":"","what":"Julian dates — julian","title":"Julian dates — julian","text":"Create Julian date object.","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/julian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian dates — julian","text":"","code":"julian(year = integer(), month = integer(), day = integer())  as_julian(date, ...)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/julian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian dates — julian","text":"year numeric vector years month numeric vector months day numeric vector days date Vector dates calendar ... Additional arguments currently used","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/julian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Julian dates — julian","text":"julian vector object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/julian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Julian dates — julian","text":"","code":"julian(2025, 4, 19) #> <julian[1]> #> [1] 2025-04-19 as_julian(\"2016-01-01\") #> <julian[1]> #> [1] 2015-12-19 as_julian(Sys.Date()) #> <julian[1]> #> [1] 2025-04-14 tibble::tibble(   x = seq(as.Date(\"2025-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"),   y = as_gregorian(x),   z = as_julian(x) ) #> # A tibble: 365 × 3 #>    x                   y          z #>    <date>          <Gre>      <Jul> #>  1 2025-01-01 2025-01-01 2024-12-19 #>  2 2025-01-02 2025-01-02 2024-12-20 #>  3 2025-01-03 2025-01-03 2024-12-21 #>  4 2025-01-04 2025-01-04 2024-12-22 #>  5 2025-01-05 2025-01-05 2024-12-23 #>  6 2025-01-06 2025-01-06 2024-12-24 #>  7 2025-01-07 2025-01-07 2024-12-25 #>  8 2025-01-08 2025-01-08 2024-12-26 #>  9 2025-01-09 2025-01-09 2024-12-27 #> 10 2025-01-10 2025-01-10 2024-12-28 #> # ℹ 355 more rows"},{"path":"https://pkg.robjhyndman.com/calcal/reference/location.html","id":null,"dir":"Reference","previous_headings":"","what":"Locations — location","title":"Locations — location","text":"Create location object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locations — location","text":"","code":"location(   latitude = numeric(),   longitude = numeric(),   elevation = numeric(),   zone = numeric() )"},{"path":"https://pkg.robjhyndman.com/calcal/reference/location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locations — location","text":"latitude numeric vector latitudes longitude numeric vector longitudes elevation numeric vector elevations sea level zone numeric vector time zones (relative UTC)","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locations — location","text":"location vector object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locations — location","text":"","code":"melbourne <- location(-37.8136, 144.9631, 31, 10)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/rd_fixed.html","id":null,"dir":"Reference","previous_headings":"","what":"RD fixed dates — rd_fixed","title":"RD fixed dates — rd_fixed","text":"Create rd_fixed object representing RD (Rata Die) fixed date day 1 01-01-01","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/rd_fixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RD fixed dates — rd_fixed","text":"","code":"rd_fixed(rd = double())  as_rd(date, ...)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/rd_fixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RD fixed dates — rd_fixed","text":"rd numeric vector representing number days since (including) 01-01-01. date Vector dates calendar ... Additional arguments currently used","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/rd_fixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RD fixed dates — rd_fixed","text":"rd_fixed vector object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/rd_fixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RD fixed dates — rd_fixed","text":"","code":"rd_fixed(1:100) #> <rd_fixed[100]> #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 as_rd(\"2016-01-01\") #> <rd_fixed[1]> #> [1] 735964 as_rd(Sys.Date()) #> <rd_fixed[1]> #> [1] 739368"},{"path":"https://pkg.robjhyndman.com/calcal/reference/sunrise.html","id":null,"dir":"Reference","previous_headings":"","what":"Sunrise and sunset given a date and location — sunrise","title":"Sunrise and sunset given a date and location — sunrise","text":"Calculate time sunrise sunset specific location date","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/sunrise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sunrise and sunset given a date and location — sunrise","text":"","code":"sunrise(date, locale, ...)  sunset(date, locale, ...)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/sunrise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sunrise and sunset given a date and location — sunrise","text":"date Date rd_fixed format locale Location class \"location\", usually output location function ... Additional arguments passed specific methods","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/sunrise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sunrise and sunset given a date and location — sunrise","text":"Time sunrise","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/sunrise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sunrise and sunset given a date and location — sunrise","text":"","code":"melbourne <- location(-37.8136, 144.9631, 31, 10) sydney <- location(-33.8688, 151.2093, 3, 10) sunrise(\"2025-01-01\", c(melbourne, sydney)) #> <time[2]> #> [1] 05:01:0.72  04:47:43.17 sunset(\"2025-01-01\", c(melbourne, sydney)) #> <time[2]> #> [1] 19:55:8.06  19:18:30.16"},{"path":"https://pkg.robjhyndman.com/calcal/reference/time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time of day — time","title":"Time of day — time","text":"Create time object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time of day — time","text":"","code":"time(hour = integer(), minute = integer(), second = numeric())  as_time(x, ...)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time of day — time","text":"hour numeric vector hours minute numeric vector minutes second numeric vector seconds x Vector times ... Additional arguments currently used","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time of day — time","text":"time vector object","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time of day — time","text":"","code":"as_time(Sys.time()) #> [1] 23.00000 24.00000 17.08961"},{"path":"https://pkg.robjhyndman.com/calcal/reference/us_holidays.html","id":null,"dir":"Reference","previous_headings":"","what":"US Holidays — us_memorial_day","title":"US Holidays — us_memorial_day","text":"Functions return Gregorian dates US holidays special days","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/us_holidays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Holidays — us_memorial_day","text":"","code":"us_memorial_day(year)  us_independence_day(year)  us_labor_day(year)  us_election_day(year)  us_daylight_saving_start(year)  us_daylight_saving_end(year)"},{"path":"https://pkg.robjhyndman.com/calcal/reference/us_holidays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Holidays — us_memorial_day","text":"year Gregorian year","code":""},{"path":"https://pkg.robjhyndman.com/calcal/reference/us_holidays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Holidays — us_memorial_day","text":"","code":"us_memorial_day(2025) #> <gregorian[1]> #> [1] 2025-05-26 us_independence_day(2025) #> <gregorian[1]> #> [1] 2025-07-04 us_labor_day(2025) #> <gregorian[1]> #> [1] 2025-09-01 us_election_day(2025) #> <gregorian[1]> #> [1] 2025-11-04 us_daylight_saving_start(2025) #> <gregorian[1]> #> [1] 2025-04-06 us_daylight_saving_end(2025) #> <gregorian[1]> #> [1] 2025-10-26"}]
