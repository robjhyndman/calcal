% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear_granularities.R
\name{linear_cyclic}
\alias{linear_cyclic}
\title{Create Linear-Cyclic Granularity Combinations}
\usage{
linear_cyclic(gran_fun1, gran_fun2, gran_levels, gran_name)
}
\arguments{
\item{gran_fun1}{A function that extracts a linear granularity from a date.
This function must return an integer.}

\item{gran_fun2}{A function that extracts a cyclic granularity from a date, nested within \code{gran_fun1}.
This function must return an integer.}

\item{gran_levels}{A character vector of the granularity levels for \code{gran_fun2}.}

\item{gran_name}{A character string giving the name of the linear granularity.}
}
\value{
A function that creates a linear granularity object.
}
\description{
Linear-cyclic granularity combinations are produced by combining two granularities, one nested within the other.
For example, the year and the month, or the week and the day-of-week. It is assumed that the
first granularity is linear (i.e., it increases over time), and the second granularity is cyclic and nested within the first granularity.
}
\examples{
# Year-quarter granularity
## Compute quarter from a Gregorian date
quarter <- function(date) {
  ceiling(month_of_year(date) / 3)
}
year_quarter <- linear_cyclic(year, quarter, paste0("Q", 1:4), "year-quarter")
year_quarter(gregorian_date(2025, 6, 25) + 1:10)

# Week-day granularity
## Compute week as linear granularity
week <- function(date) {
  (seq_along(date) - 1) \%/\% 7 + 1
}
## Compute day as numerical cyclic granularity
day <- function(date) {
  day_of_week(date, numeric = TRUE)
}
week_day <- linear_cyclic(
  week,
  day,
  c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
  gran_name = "week-day"
)
week_day(gregorian_date(2025, 6, 25) + 1:10)
}
